
name: sciber-yklocker test and build


on: [ push ]

permissions:
  contents: write # to enable releases

# Create one job per specified OS
jobs:
  yklocker_build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        python-version: ["3.11"]
        #exclude:
        #
        # Define variable names
        include:
          - os: windows-2022
            build_filename: sciber-yklocker.exe
            msi_filename:  sciber-yklocker.msi
            toxbuild: build_win
          - os: ubuntu-22.04
            build_filename: sciber-yklocker-linux
            toxbuild: build_linux
          - os: macos-12
            toxbuild: build_macos
            build_filename: sciber-yklocker-macos
            build_appname: sciber-yklocker-macos.app
            build_pkgname: sciber-yklocker-macos.pkg
            install_target_location: /Applications
    # Get access to repo contents
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python # Get Python with the minimum required version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - if: matrix.os == 'ubuntu-22.04'
        name: "Ubuntu specific APT install" # Make sure we install necessary prerequisites
        run: |
          sudo apt install -y libpcsclite-dev python3.11-dev swig pcscd

      - name: Install dependencies # Common for all OS's
        run: |
          python -m pip install --upgrade pip
          pip install tox

        # Per OS install reqs and run tests
      - name: Install requirements.txt and run tests for ${{matrix.os}}
        run: |
          python -m tox

      - name: Build for ${{matrix.os}}
        run: |
          python -m tox -e ${{matrix.toxbuild}}
          ls dist

      - if: matrix.os == 'ubuntu-22.04'
        name: "Ubuntu binary execution test"
        run: |
          file dist/${{matrix.build_filename}}
          dist/${{matrix.build_filename}} -z
          echo $?
          cat /var/log/syslog | grep sciber-yklocker

      - if: matrix.os == 'macos-12'
        name: "MacOS binary execution test"
        run: |
          file dist/${{matrix.build_appname}}/Contents/MacOS/sciber-yklocker-macos
          dist/${{matrix.build_appname}}/Contents/MacOS/sciber-yklocker-macos -z
          echo $?
          log show --predicate 'process = "sciber-yklocker-macos"' --last 10s

      - if: matrix.os == 'macos-12'
        name: "MacOS pkg build"
        run: |
          pkgbuild --identifier "io.sciber.sciberyklocker" --install-location ${{matrix.install_target_location}} --component dist/${{matrix.build_appname}} dist/${{matrix.build_pkgname}}

      - if: matrix.os == 'macos-12'
        name: "MacOS pkg install"
        run: |
          sudo installer -pkg dist/${{matrix.build_pkgname}} -target /Applications -verbose

      - if: matrix.os == 'windows-2022'
        name: "Windows MSI build"
        run: |
          dotnet tool install --global wix
          wix.exe build -arch x64 .\src\windows_utils\sciber-yklocker.wxs
          cp .\src\windows_utils\${{matrix.msi_filename}} dist/${{matrix.msi_filename}}
          ls dist

      - if: matrix.os == 'windows-2022'
        name: "Windows MSI install"
        run: |
          $pwd = pwd
          $distPath = "dist\${{matrix.msi_filename}}"
          $msi = "$pwd\$distPath"
          echo $msi
          file $msi
          echo "log" > install_log
          echo "before msiexec"
          # -RunAsAdmin is a GitHub-actions command to elevate into admin
          msiexec /i "$msi" /quiet /li install_log #-RunAsAdmin
          echo "after msiexec"
          ls
          type install_log
          #Start-Sleep -Seconds 20
          # ls 'D:\Program Files\Sciber\SciberYklocker\'
          # ls 'C:\Program Files\Sciber\SciberYklocker\'
          #Get-EventLog -LogName Application -Source SciberYklocker -Newest 5 | Select TimeGenerated,ReplacementStrings

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./cov.xml

      - if: contains(github.ref,'dev')
        name: "Dev: Publish release files"
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "v1.0-dev"
          prerelease: True
          files: dist/*

      - if: contains(github.ref,'main')
        name: "Main: Publish release files"
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: "v1.0-main"
          prerelease: False
          files: dist/*
